import { 
    Client, GatewayIntentBits, PermissionsBitField, 
    SlashCommandBuilder, REST, Routes, ChannelType, 
    ActionRowBuilder, ButtonBuilder, ButtonStyle 
} from 'discord.js';
import 'dotenv/config';
import mongoose from 'mongoose';
import Economy from './models/economy.js';

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const economyCommandsPath = path.join(__dirname, 'commands/economy');
const economyCommandFiles = fs.readdirSync(economyCommandsPath).filter(file => file.endsWith('.js'));

for (const file of economyCommandFiles) {
    import(`./commands/economy/${file}`).then(command => {
        client.commands.set(command.data.name, command);
    }).catch(err => console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${file}:`, err));
}

console.log("üîç MONGO_URI:", process.env.MONGO_URI);

// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
mongoose.connect(process.env.MONGO_URI)
    .then(() => console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'))
    .catch(err => console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB:', err));

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
if (!process.env.TOKEN || !process.env.CLIENT_ID) {
    console.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà TOKEN ‡πÅ‡∏•‡∏∞ CLIENT_ID ‡πÉ‡∏ô .env");
    process.exit(1);
}

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™ Client
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

// ‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands
const commands = [
    new SlashCommandBuilder()
        .setName('setup')
        .setDescription('üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô')
        .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),
    new SlashCommandBuilder()
        .setName('stats')
        .setDescription('üìä ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á Server Stats')
        .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),
    new SlashCommandBuilder()
        .setName('help')
        .setDescription('üìñ ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'),
    new SlashCommandBuilder()
        .setName('balance')
        .setDescription('üí∞ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'),
    new SlashCommandBuilder()
        .setName('daily')
        .setDescription('üíµ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô'),
    new SlashCommandBuilder()
        .setName('transfer')
        .setDescription('üí∏ ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å')
        .addUserOption(option => option.setName('user').setDescription('‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô').setRequired(true))
        .addIntegerOption(option => option.setName('amount').setDescription('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô').setRequired(true)),
    new SlashCommandBuilder()
        .setName('deposit')
        .setDescription('üè¶ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£')
        .addIntegerOption(option => option.setName('amount').setDescription('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô').setRequired(true)),
    new SlashCommandBuilder()
        .setName('withdraw')
        .setDescription('üè¶ ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£')
        .addIntegerOption(option => option.setName('amount').setDescription('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô').setRequired(true)),
];

await rest.put(Routes.applicationCommands(process.env.CLIENT_ID), { body: commands });
console.log("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

// ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
client.once('ready', async () => {
    console.log(`‚úÖ ‡∏ö‡∏≠‡∏ó ${client.user.tag} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!`);
    await registerCommands();
});

// ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏¢‡∏®
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand() && !interaction.isButton()) return;

    if (interaction.commandName === 'setup') {
        let verifyChannel = interaction.guild.channels.cache.find(ch => ch.name === "üî∞Ô∏±‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô");
        if (!verifyChannel) {
            verifyChannel = await interaction.guild.channels.create({
                name: "üî∞Ô∏±‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô",
                type: ChannelType.GuildText
            });
        }
        const verifyRow = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId("start_verification")
                .setLabel("üîç ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô")
                .setStyle(ButtonStyle.Primary)
        );
        await verifyChannel.send({
            content: "**üëã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏¢‡∏®**",
            components: [verifyRow]
        });
        await interaction.reply({ content: "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", ephemeral: true });
    }

    if (interaction.isButton() && interaction.customId === "start_verification") {
        let role = interaction.guild.roles.cache.find(r => r.name === "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å");
        if (!role) {
            role = await interaction.guild.roles.create({
                name: "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
                color: "BLUE",
                reason: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏®‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô"
            });
        }
        const member = await interaction.guild.members.fetch(interaction.user.id);
        if (member.roles.cache.has(role.id)) {
            return await interaction.reply({ content: "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏¢‡∏® '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å' ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!", ephemeral: true });
        }
        await member.roles.add(role);
        await interaction.reply({ content: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏® **${role.name}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!`, ephemeral: true });
    }
});

client.login(process.env.TOKEN);
