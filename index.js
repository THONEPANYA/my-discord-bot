import { Client, GatewayIntentBits, PermissionsBitField, SlashCommandBuilder, REST, Routes, ChannelType, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import 'dotenv/config';

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
if (!process.env.TOKEN || !process.env.CLIENT_ID) {
    console.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà TOKEN ‡πÅ‡∏•‡∏∞ CLIENT_ID ‡πÉ‡∏ô .env");
    process.exit(1);
}

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands
const commands = [
    new SlashCommandBuilder()
        .setName('setup')
        .setDescription('üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô')
        .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),

    new SlashCommandBuilder()
        .setName('setupstats')
        .setDescription('üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Server Stats')
        .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator)
];

// ‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands
async function registerCommands() {
    const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);
    try {
        console.log("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands...");
        await rest.put(Routes.applicationCommands(process.env.CLIENT_ID), { body: commands });
        console.log("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
        console.error("‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
    }
}

// ‚úÖ ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
client.once('ready', async () => {
    console.log(`‚úÖ ‡∏ö‡∏≠‡∏ó ${client.user.tag} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!`);
    await registerCommands();
});

// ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Slash Commands
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand()) return;
    
    const { commandName } = interaction;

    if (commandName === 'setup') {
        let category = interaction.guild.channels.cache.find(ch => ch.name === "üìå ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô" && ch.type === ChannelType.GuildCategory);
        if (!category) {
            category = await interaction.guild.channels.create({
                name: "üìå ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô",
                type: ChannelType.GuildCategory,
                permissionOverwrites: [{ id: interaction.guild.id, allow: [PermissionsBitField.Flags.ViewChannel] }]
            });
        }

        let verifyChannel = interaction.guild.channels.cache.find(ch => ch.name === "üî∞Ô∏±‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô");
        if (!verifyChannel) {
            verifyChannel = await interaction.guild.channels.create({
                name: "üî∞Ô∏±‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô",
                type: ChannelType.GuildText,
                parent: category.id
            });
        }

        const verifyRow = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId("start_verification")
                .setLabel("üîç ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô")
                .setStyle(ButtonStyle.Primary)
        );

        await verifyChannel.send({
            content: "**üëã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏¢‡∏®**",
            components: [verifyRow]
        });

        await interaction.reply("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
    }

    client.on("interactionCreate", async (interaction) => {
        if (!interaction.isButton()) return;
    
        console.log(`üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${interaction.customId}`); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    
        if (interaction.customId === "start_verification") {
            const roleRow = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId(`accept_role_${interaction.user.id}`)
                    .setLabel("‚úÖ ‡∏£‡∏±‡∏ö‡∏¢‡∏®")
                    .setStyle(ButtonStyle.Success)
            );
    
            await interaction.reply({
                content: "**‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏¢‡∏®**",
                components: [roleRow],
                ephemeral: true
            });
        }
    });

    if (commandName === 'setupstats') {
        await interaction.reply("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥...");

        let statsCategory = interaction.guild.channels.cache.find(ch => ch.name === "üìä Server Stats" && ch.type === ChannelType.GuildCategory);
        if (!statsCategory) {
            statsCategory = await interaction.guild.channels.create({
                name: "üìä Server Stats",
                type: ChannelType.GuildCategory,
                permissionOverwrites: [{ id: interaction.guild.id, allow: [PermissionsBitField.Flags.ViewChannel] }]
            });
        }

        await interaction.guild.channels.create({
            name: `üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${interaction.guild.memberCount}`,
            type: ChannelType.GuildVoice,
            parent: statsCategory.id,
            permissionOverwrites: [{ id: interaction.guild.id, deny: [PermissionsBitField.Flags.Connect] }]
        });

        await interaction.guild.channels.create({
            name: `üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${interaction.guild.channels.cache.filter(ch => ch.type === ChannelType.GuildText).size}`,
            type: ChannelType.GuildVoice,
            parent: statsCategory.id,
            permissionOverwrites: [{ id: interaction.guild.id, deny: [PermissionsBitField.Flags.Connect] }]
        });

        await interaction.guild.channels.create({
            name: `üîä ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${interaction.guild.channels.cache.filter(ch => ch.type === ChannelType.GuildVoice).size}`,
            type: ChannelType.GuildVoice,
            parent: statsCategory.id,
            permissionOverwrites: [{ id: interaction.guild.id, deny: [PermissionsBitField.Flags.Connect] }]
        });

        await interaction.guild.channels.create({
            name: `üé≠ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${interaction.guild.roles.cache.size}`,
            type: ChannelType.GuildVoice,
            parent: statsCategory.id,
            permissionOverwrites: [{ id: interaction.guild.id, deny: [PermissionsBitField.Flags.Connect] }]
        });

        await interaction.editReply("‚úÖ **‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á Server Stats ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!**");
    }
});

const antiSpamEnabled = true;
const antiRaidEnabled = true;
const spamLimit = 5;
const userMessages = new Map();
const joinTimestamps = [];
const joinLimit = 5; 

client.on("messageCreate", async (message) => {
    if (!antiSpamEnabled || message.author.bot || !message.guild) return;
    const now = Date.now();
    const userId = message.author.id;

    if (!userMessages.has(userId)) {
        userMessages.set(userId, []);
    }

    const timestamps = userMessages.get(userId);
    timestamps.push(now);
    while (timestamps.length > 0 && timestamps[0] < now - 5000) {
        timestamps.shift();
    }
    if (timestamps.length > spamLimit) {
        await message.delete();
        message.channel.send(`üö® <@${userId}> ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πÅ‡∏õ‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°!`);
    }
});

client.on("guildMemberAdd", async (member) => {
    if (!antiRaidEnabled) return;
    const now = Date.now();
    joinTimestamps.push(now);
    while (joinTimestamps.length > 0 && joinTimestamps[0] < now - 10000) {
        joinTimestamps.shift();
    }
    if (joinTimestamps.length > joinLimit) {
        await member.kick("üö® ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Raid ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥!");
    }
});

client.on("guildMemberAdd", async (member) => {
    const settings = guildSettings.get(member.guild.id);
    if (!settings || !settings.welcomeChannel) return;
    const welcomeChannel = member.guild.channels.cache.get(settings.welcomeChannel);
    if (!welcomeChannel) return;
    const welcomeEmbed = {
        color: 0x00FF00,
        title: "üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!",
        description: `üëã **‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö** <@${member.id}> ‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå **${member.guild.name}**!`,
        thumbnail: { url: member.user.displayAvatarURL() },
        footer: { text: `‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${member.guild.memberCount} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!` }
    };
    welcomeChannel.send({ embeds: [welcomeEmbed] });
});

client.on("guildMemberRemove", async (member) => {
    const settings = guildSettings.get(member.guild.id);
    if (!settings || !settings.goodbyeChannel) return;
    const goodbyeChannel = member.guild.channels.cache.get(settings.goodbyeChannel);
    if (!goodbyeChannel) return;
    const goodbyeEmbed = {
        color: 0xFF0000,
        title: "üëã ‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô...",
        description: `‚ùå **${member.user.tag}** ‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...`,
        thumbnail: { url: member.user.displayAvatarURL() },
        footer: { text: `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ${member.guild.memberCount} ‡∏Ñ‡∏ô` }
    };
    goodbyeChannel.send({ embeds: [goodbyeEmbed] });
});

// ‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ö‡∏≠‡∏ó
client.login(process.env.TOKEN);
