import { 
    Client, GatewayIntentBits, PermissionsBitField, 
    SlashCommandBuilder, REST, Routes, ChannelType, 
    ActionRowBuilder, ButtonBuilder, ButtonStyle 
} from 'discord.js';
import 'dotenv/config';

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token
if (!process.env.TOKEN || !process.env.CLIENT_ID) {
    console.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà TOKEN ‡πÅ‡∏•‡∏∞ CLIENT_ID ‡πÉ‡∏ô .env");
    process.exit(1);
}

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands
const commands = [
    new SlashCommandBuilder()
        .setName('setup')
        .setDescription('üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô')
        .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),

    new SlashCommandBuilder()
        .setName('setupstats')
        .setDescription('üìä ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á Server Stats')
        .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator)
];

const statsChannels = {}; // ‡πÄ‡∏Å‡πá‡∏ö Channel ID ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥

// ‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands
async function registerCommands() {
    const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);
    try {
        console.log("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands...");
        await rest.put(Routes.applicationCommands(process.env.CLIENT_ID), { body: commands });
        console.log("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
        console.error("‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Slash Commands ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
    }
}

// ‚úÖ ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
client.once('ready', async () => {
    console.log(`‚úÖ ‡∏ö‡∏≠‡∏ó ${client.user.tag} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!`);
    await registerCommands();
});

// ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Slash Commands ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î
client.on('interactionCreate', async (interaction) => {
    if (interaction.isCommand()) {
        const { commandName } = interaction;

        if (commandName === 'setup') {
            let category = interaction.guild.channels.cache.find(ch => ch.name === "üìå ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô" && ch.type === ChannelType.GuildCategory);
            if (!category) {
                category = await interaction.guild.channels.create({
                    name: "üìå ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô",
                    type: ChannelType.GuildCategory,
                    permissionOverwrites: [{ id: interaction.guild.id, allow: [PermissionsBitField.Flags.ViewChannel] }]
                });
            }
        
            let verifyChannel = interaction.guild.channels.cache.find(ch => ch.name === "üî∞Ô∏±‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô");
            if (!verifyChannel) {
                verifyChannel = await interaction.guild.channels.create({
                    name: "üî∞Ô∏±‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô",
                    type: ChannelType.GuildText,
                    parent: category.id
                });
            }
        
            const verifyRow = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId("start_verification")
                    .setLabel("üîç ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô")
                    .setStyle(ButtonStyle.Primary)
            );
        
            await verifyChannel.send({
                content: "**üëã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏¢‡∏®**",
                components: [verifyRow]
            });
        
            await interaction.reply({ content: "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", ephemeral: true });
        }

        if (commandName === 'setupstats') {
            await interaction.reply("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥...");
        
            // ‡∏´‡∏≤ Category ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô
            let statsCategory = interaction.guild.channels.cache
                .filter(ch => ch.type === ChannelType.GuildCategory)
                .sort((a, b) => a.position - b.position) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
                .first();
        
            if (!statsCategory) {
                statsCategory = await interaction.guild.channels.create({
                    name: "üìä Server Stats",
                    type: ChannelType.GuildCategory,
                    position: 0 // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                });
            } else {
                await statsCategory.setPosition(0); // ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡∏™‡∏∏‡∏î
            }
        
            const stats = {
                members: `üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${interaction.guild.memberCount}`,
                textChannels: `üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${interaction.guild.channels.cache.filter(ch => ch.type === ChannelType.GuildText).size}`,
                voiceChannels: `üîä ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${interaction.guild.channels.cache.filter(ch => ch.type === ChannelType.GuildVoice).size}`,
                roles: `üé≠ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${interaction.guild.roles.cache.size}`
            };
        
            for (const [key, name] of Object.entries(stats)) {
                let channel = interaction.guild.channels.cache.find(ch => ch.name.startsWith(name.split(":")[0]) && ch.type === ChannelType.GuildVoice);
                if (!channel) {
                    channel = await interaction.guild.channels.create({
                        name,
                        type: ChannelType.GuildVoice,
                        parent: statsCategory.id,
                        position: 0, // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                        permissionOverwrites: [{ id: interaction.guild.id, deny: [PermissionsBitField.Flags.Connect] }]
                    });
                }
                statsChannels[key] = channel.id;
            }
        
            await interaction.editReply("‚úÖ **‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á Server Stats ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!**");
        }
    }

    if (interaction.isButton()) {
        if (interaction.customId === "start_verification") {
            const roleRow = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId(`accept_role_${interaction.user.id}`)
                    .setLabel("‚úÖ ‡∏£‡∏±‡∏ö‡∏¢‡∏®")
                    .setStyle(ButtonStyle.Success)
            );
        
            await interaction.reply({
                content: "**‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏¢‡∏®**",
                components: [roleRow],
                ephemeral: true
            });
        }

        if (interaction.customId.startsWith("accept_role_")) {
            const roleName = "‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏®‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            const role = interaction.guild.roles.cache.find(r => r.name === roleName);
            
            if (!role) {
                return await interaction.reply({ content: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏®‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£!", ephemeral: true });
            }
        
            const member = interaction.guild.members.cache.get(interaction.user.id);
            if (!member) {
                return await interaction.reply({ content: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!", ephemeral: true });
            }
        
            await interaction.deferReply({ ephemeral: true }); // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ã‡πâ‡∏≥
        
            await member.roles.add(role);
        
            await interaction.editReply({ content: `‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏® **${role.name}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!` }); // ‚úÖ ‡πÉ‡∏ä‡πâ editReply ‡πÅ‡∏ó‡∏ô reply
        }
    }
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
client.on("guildMemberAdd", async (member) => updateStats(member.guild));
client.on("guildMemberRemove", async (member) => updateStats(member.guild));

async function updateStats(guild) {
    if (!statsChannels.members) return;
    const membersChannel = guild.channels.cache.get(statsChannels.members);
    const textChannelsChannel = guild.channels.cache.get(statsChannels.textChannels);
    const voiceChannelsChannel = guild.channels.cache.get(statsChannels.voiceChannels);
    const rolesChannel = guild.channels.cache.get(statsChannels.roles);

    if (membersChannel) await membersChannel.setName(`üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${guild.memberCount}`);
    if (textChannelsChannel) await textChannelsChannel.setName(`üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${guild.channels.cache.filter(ch => ch.type === ChannelType.GuildText).size}`);
    if (voiceChannelsChannel) await voiceChannelsChannel.setName(`üîä ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${guild.channels.cache.filter(ch => ch.type === ChannelType.GuildVoice).size}`);
    if (rolesChannel) await rolesChannel.setName(`üé≠ ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${guild.roles.cache.size}`);
}

// ‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ö‡∏≠‡∏ó
client.login(process.env.TOKEN);